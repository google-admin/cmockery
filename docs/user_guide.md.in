# Cmockery User Guide

Cmockery is a lightweight library that is used to author C unit tests.

### Contents

 * [Test Execution](#TestExecution)
 * [Exception Handling](#ExceptionHandling)
 * [Failure Conditions](#FailureConditions)
 * [Assertions](#Assertions)
  * [AssertMacros](#AssertMacros)
 * [Dynamic Memory Allocation](#DynamicMemoryAllocation)
 * [Mock functions](#MockFunctions)
  * [Return Values](#ReturnValues)
  * [Checking Parameters](#CheckingParameters)
 * [Test State](#TestState)
 * [Example](#Example)

## <a name="TestExecution"></a>Test Execution

Cmockery unit test cases are functions with the signature
`void function(void **state)`.  Cmockery test applications initialize a
table with test case function pointers using `unit_test*()` macros.  This
table is then passed to the `run_tests()` macro to execute the tests.

`run_tests()` sets up the appropriate exception / signal handlers and
other data structures prior to running each test function.   When a unit test
is complete, `run_tests()` performs various checks to determine whether
the test succeeded.

#### <a name="run_tests"></a>Using `run_tests()`

{{"source": "../src/example/run_tests.c", "marker": "docs"}}

## <a name="ExceptionHandling"></a>Exception Handling

Before a test function is executed by `run_tests()`,
exception / signal handlers are overridden with a handler that simply
displays an error and exits a test function if an exception occurs.  If an
exception occurs outside of a test function, for example, in Cmockery itself,
the application aborts execution and returns an error code.

## <a name="FailureConditions"></a>Failure Conditions

If a failure occurs during a test function that's executed via
`run_tests()`, the test function is aborted and the application's
execution resumes with the next test function.

Test failures are ultimately signalled via the Cmockery function `fail()`.
The following events will result in the Cmockery library signalling a test
failure:

 * [Assertions](#Assertions)
 * [Exceptions](#ExceptionHandling)
 * [Memory leaks](#DynamicMemoryAllocation)
 * [Mismatched setup and tear down functions](#TestState)
 * [Missing mock return values](#ReturnValues)
 * [Unused mock return values](#ReturnValues)
 * [Expected parameter values](#CheckingParameters)
 * [Unused expected parameter values](#CheckingParameters)

## <a name="Assertions"></a>Assertions

Runtime assert macros like the standard C library's `assert()` should
be redefined in modules being tested to use Cmockery's `mock_assert()`
function.  Normally `mock_assert()` signals a
[test failure](#FailureConditions).  If a function is called using
the `expect_assert_failure()` macro, any calls to `mock_assert()`
within the function will result in the execution of the test.  If no
calls to `mock_assert()` occur during the function called via
`expect_assert_failure()` a test failure is signalled.

#### <a name="mock_assert"></a>Using `mock_assert()`

{{"source": "../src/example/assert_module.c", "marker": "docs"}}

{{"source": "../src/example/assert_module_test.c", "marker": "docs"}}

### <a name="AssertMacros"></a>Assert Macros

Cmockery provides an assortment of assert macros that tests should use use in
preference to the C standard library's `assert()` macro.  On an assertion
failure, a Cmockery assert macro will write the failure to the standard error
stream and signal a test failure.  Due to limitations of the C language, the
general C standard library `assert()` and Cmockery's `assert_true()` and
`assert_false()` macros can only display the expression that caused the assert
failure.  Cmockery's type-specific assert macros, `assert_{type}_equal()` and
`assert_{type}_not_equal()`, display the data that caused the assertion failure
which increases data visibility aiding debugging of failing test cases.

#### <a name="UsingAssertEqualMacros"></a>Using `assert_{type}_equal()` macros

{{"source": "../src/example/assert_macro.c", "marker": "docs"}}

{{"source": "../src/example/assert_macro_test.c", "marker": "docs"}}

## <a name="DynamicMemoryAllocation"></a>Dynamic Memory Allocation

To test for memory leaks, buffer overflows, and underflows, a module being
tested by Cmockery should replace calls to `malloc()`, `calloc()`, and
`free()` with `test_malloc()`, `test_calloc()`, and
`test_free()`, respectively.  Each time a block is deallocated using
`test_free()`, it is checked for corruption. If a corrupt block is found,
a [test failure](#FailureConditions) is signalled.  All blocks
allocated using the `test_*()` allocation functions are tracked by the
Cmockery library.  When a test completes, if any allocated blocks (memory leaks)
remain, they are reported and a test failure is signalled.

For simplicity, Cmockery currently executes all tests in one process.
Therefore, all test cases in a test application share a single address space,
which means that memory corruption from a single test case could potentially cause
the test application to exit prematurely.

#### <a name="UsingCmockerysAllocators"></a>Using Cmockery's Allocators

{{"source": "../src/example/allocate_module.c", "marker": "docs"}}

{{"source": "../src/example/allocate_module_test.c", "marker": "docs"}}

## <a name="MockFunctions"></a>Mock Functions

A unit test should ideally isolate the function or module being tested
from any external dependencies.  This can be performed using mock functions
that are either statically or dynamically linked with the module being tested.
Mock functions must be statically linked when the code being tested directly 
references external functions.  Dynamic linking is simply the process of 
setting a function pointer in a table used by the tested module to reference 
a mock function defined in the unit test.

### <a name="ReturnValues"></a>Return Values

In order to simplify the implementation of mock functions, Cmockery provides
functionality which stores return values for mock functions in each test
case using `will_return()`.  These values are then returned by each mock 
function using calls to `mock()`.

Values passed to `will_return()` are added to a queue for each function 
specified.  Each successive call to `mock()` from a function removes a
return value from the queue.  This makes it possible for a mock function to use
multiple calls to `mock()` to return output parameters in addition to a
return value.  In addition, this allows the specification of return values for 
multiple calls to a mock function.

#### <a name="will_return"></a>Using `will_return()`

{{"source": "../src/example/database.h", "marker": "docs"}}

{{"source": "../src/example/customer_database.c", "marker": "docs"}}

{{"source": "../src/example/customer_database_test.c", "marker": "docs"}}

### <a name="CheckingParameters"></a>Checking Parameters

In addition to storing the return values of mock functions, Cmockery
provides functionality to store expected values for mock function parameters
using the `expect_*()` functions provided.  A mock function parameter can then
be validated using the `check_expected()` macro.


Successive calls to `expect_*()` macros for a parameter queues values to
check the specified parameter.  `check_expected()` checks a function parameter
against the next value queued using `expect_*()`, if the parameter check fails a
test failure is signalled.  In addition if `check_expected()` is called and
no more parameter values are queued a test failure occurs.

#### <a name="expect"></a>Using `expect_*()`

{{"source": "../src/example/product_database.c", "marker": "docs"}}

{{"source": "../src/example/product_database_test.c", "marker": "docs"}}

## <a name="TestState"></a>Test State

Cmockery allows the specification of multiple setup and tear down functions
for each test case.  Setup functions, specified by the `unit_test_setup()`
or `unit_test_setup_teardown()` macros allow common initialization to be
shared between multiple test cases.  In addition, tear down functions,
specified by the `unit_test_teardown()` or
`unit_test_setup_teardown()` macros provide a code path that is always
executed for a test case even when it fails.

#### <a name="unit_test_setup_teardown"></a>Using `unit_test_setup_teardown()`

{{"source": "../src/example/key_value.c", "marker": "docs"}}

{{"source": "../src/example/key_value_test.c", "marker": "docs"}}

## <a name="Example"></a>Example

A small command line calculator application
([`calculator.c`](src/example/calculator.c))
and test application that full exercises the calculator application
([`calculator_test.c`](src/example/calculator_test.c))
are provided as an example of Cmockery's features discussed in this document.
